#! /usr/bin/env python3
#
# Copyright © Michal Čihař <michal@weblate.org>
#
# This file is part of Weblate <https://weblate.org/>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

"""Export CLDR language names into po file."""

import glob
import json
import re

BASE = "modules/cldr-json/cldr-json/cldr-localenames-full/main/en/languages.json"
HEADER = """# CLDR language names for {0}
# Automatically generated using tools available at
# https://github.com/WeblateOrg/language-data

msgid ""
msgstr ""
"Project-Id-Version: Weblate\\n"
"Language: {0}\\n"
"MIME-Version: 1.0\\n"
"Content-Type: text/plain; charset=UTF-8\\n"
"Content-Transfer-Encoding: 8bit\\n"
"X-Generator: Weblate\\n"
"""
ROW = """
msgid "{}"
msgstr "{}"
"""


def extract_names(data):
    code, langs = next(iter(data["main"].items()))
    return code, langs["localeDisplayNames"]["languages"]


# Parse language names
with open(BASE) as handle:
    data = json.load(handle)
names = extract_names(data)[1]

# Process translations
for lang in glob.glob(
    "modules/cldr-json/cldr-json/cldr-localenames-full/main/*/languages.json"
):
    if lang == BASE:
        continue

    with open(lang) as handle:
        data = json.load(handle)

    result = {}

    language_code, language_names = extract_names(data)

    for code, name in language_names.items():
        if code == name or code not in names:
            continue
        name_tokens = set(re.findall(r"\w+", name))
        code_tokens = set(code.split("-alt")[0].split("-"))
        if name_tokens & code_tokens:
            continue

        result[names[code]] = name

    with open(f"languages-po/{language_code}.po", "w") as handle:
        handle.write(HEADER.format(language_code))
        for msgid, msgstr in sorted(result.items()):
            handle.write(ROW.format(msgid, msgstr))
