#! /usr/bin/env python3
#
# Copyright © 2018–2022 Michal Čihař <michal@cihar.com>
#
# This file is part of Weblate <https://weblate.org/>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import json
from collections import defaultdict

MAPPING = {
    "zh": "zh_Hans",
}

with open(
    "modules/cldr-json/cldr-json/cldr-core/supplemental/territoryInfo.json"
) as handle:
    languages = defaultdict(int)
    for code, territory in json.load(handle)["supplemental"]["territoryInfo"].items():
        population = int(territory["_population"])
        if "languagePopulation" not in territory:
            print(f"Skipping {code}: {territory}")
            continue
        for language_cldr, data in territory["languagePopulation"].items():
            language = MAPPING.get(language_cldr, language_cldr)
            languages[language] += population * float(data["_populationPercent"])
            languages[f"{language}_{code}"] += population * float(
                data["_populationPercent"]
            )

with open("population.csv", "w") as handle:
    handle.write("code,population\n")
    for code in sorted(languages):
        handle.write(f"{code},{int(languages[code])}\n")
